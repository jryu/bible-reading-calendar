// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#include "config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace config {
class CalendarConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CalendarConfig>
      _instance;
} _CalendarConfig_default_instance_;
}  // namespace config
namespace protobuf_config_2eproto {
static void InitDefaultsCalendarConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::config::CalendarConfig::_i_give_permission_to_break_this_code_default_output_file_name_.DefaultConstruct();
  *::config::CalendarConfig::_i_give_permission_to_break_this_code_default_output_file_name_.get_mutable() = ::std::string("output", 6);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::config::CalendarConfig::_i_give_permission_to_break_this_code_default_output_file_name_.get_mutable());
  {
    void* ptr = &::config::_CalendarConfig_default_instance_;
    new (ptr) ::config::CalendarConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::config::CalendarConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CalendarConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCalendarConfig}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CalendarConfig.base);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[6];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::config::CalendarConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::config::CalendarConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::config::CalendarConfig, year_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::config::CalendarConfig, month_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::config::CalendarConfig, cell_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::config::CalendarConfig, cell_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::config::CalendarConfig, cell_margin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::config::CalendarConfig, line_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::config::CalendarConfig, output_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::config::CalendarConfig, paper_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::config::CalendarConfig, language_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::config::CalendarConfig, coverage_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::config::CalendarConfig, duration_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::config::CalendarConfig, days_to_rest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::config::CalendarConfig, output_file_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::config::CalendarConfig, default_font_family_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::config::CalendarConfig, day_number_font_family_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::config::CalendarConfig, day_number_font_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::config::CalendarConfig, day_plan_font_family_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::config::CalendarConfig, day_plan_font_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::config::CalendarConfig, month_label_font_family_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::config::CalendarConfig, month_label_font_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::config::CalendarConfig, month_label_uppercase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::config::CalendarConfig, wday_label_font_family_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::config::CalendarConfig, wday_label_font_size_),
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  15,
  21,
  20,
  ~0u,
  0,
  1,
  2,
  14,
  3,
  17,
  4,
  18,
  16,
  5,
  19,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 28, sizeof(::config::CalendarConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::config::_CalendarConfig_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "config.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014config.proto\022\006config\"\204\006\n\016CalendarConfi"
      "g\022\014\n\004year\030\001 \001(\005\022\r\n\005month\030\002 \001(\005\022\022\n\ncell_w"
      "idth\030\003 \001(\001\022\023\n\013cell_height\030\004 \001(\001\022\023\n\013cell_"
      "margin\030\005 \001(\001\022\022\n\nline_width\030\006 \001(\001\022,\n\013outp"
      "ut_type\030\007 \001(\0162\022.config.OutputType:\003SVG\0220"
      "\n\npaper_type\030\010 \001(\0162\021.config.PaperType:\tU"
      "S_LETTER\022+\n\010language\030\t \001(\0162\020.config.Lang"
      "uage:\007ENGLISH\0228\n\rcoverage_type\030\026 \001(\0162\024.c"
      "onfig.CoverageType:\013WHOLE_BIBLE\0225\n\rdurat"
      "ion_type\030\027 \001(\0162\024.config.DurationType:\010ON"
      "E_YEAR\022*\n\014days_to_rest\030\030 \003(\0162\024.config.Da"
      "yOfTheWeek\022 \n\020output_file_name\030\013 \001(\t:\006ou"
      "tput\022\033\n\023default_font_family\030\014 \001(\t\022\036\n\026day"
      "_number_font_family\030\r \001(\t\022\034\n\024day_number_"
      "font_size\030\016 \001(\001\022\034\n\024day_plan_font_family\030"
      "\017 \001(\t\022\032\n\022day_plan_font_size\030\020 \001(\001\022\037\n\027mon"
      "th_label_font_family\030\021 \001(\t\022\035\n\025month_labe"
      "l_font_size\030\022 \001(\001\022$\n\025month_label_upperca"
      "se\030\023 \001(\010:\005false\022\036\n\026wday_label_font_famil"
      "y\030\024 \001(\t\022\034\n\024wday_label_font_size\030\025 \001(\001*\'\n"
      "\nOutputType\022\007\n\003SVG\020\000\022\007\n\003PDF\020\001\022\007\n\003PNG\020\002*\""
      "\n\tPaperType\022\r\n\tUS_LETTER\020\000\022\006\n\002A4\020\001*#\n\010La"
      "nguage\022\013\n\007ENGLISH\020\000\022\n\n\006KOREAN\020\001*\245\001\n\014Cove"
      "rageType\022\021\n\rNEW_TESTAMENT\020\000\022\021\n\rOLD_TESTA"
      "MENT\020\001\022\034\n\030NEW_TESTAMENT_AND_PSALMS\020\002\022\017\n\013"
      "WHOLE_BIBLE\020\003\022#\n\037WHOLE_BIBLE_NEW_TESTAME"
      "NT_FIRST\020\004\022\033\n\027WHOLE_BIBLE_IN_PARALLEL\020\005*"
      "Q\n\014DurationType\022\014\n\010ONE_YEAR\020\000\022\030\n\024TWO_YEA"
      "RS_FIRST_YEAR\020\001\022\031\n\025TWO_YEARS_SECOND_YEAR"
      "\020\002*P\n\014DayOfTheWeek\022\007\n\003SUN\020\000\022\007\n\003MON\020\001\022\010\n\004"
      "TUES\020\002\022\007\n\003WED\020\003\022\t\n\005THURS\020\004\022\007\n\003FRI\020\005\022\007\n\003S"
      "AT\020\006"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1244);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "config.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_config_2eproto
namespace config {
const ::google::protobuf::EnumDescriptor* OutputType_descriptor() {
  protobuf_config_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_2eproto::file_level_enum_descriptors[0];
}
bool OutputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PaperType_descriptor() {
  protobuf_config_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_2eproto::file_level_enum_descriptors[1];
}
bool PaperType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Language_descriptor() {
  protobuf_config_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_2eproto::file_level_enum_descriptors[2];
}
bool Language_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CoverageType_descriptor() {
  protobuf_config_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_2eproto::file_level_enum_descriptors[3];
}
bool CoverageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DurationType_descriptor() {
  protobuf_config_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_2eproto::file_level_enum_descriptors[4];
}
bool DurationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DayOfTheWeek_descriptor() {
  protobuf_config_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_2eproto::file_level_enum_descriptors[5];
}
bool DayOfTheWeek_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CalendarConfig::InitAsDefaultInstance() {
}
::google::protobuf::internal::ExplicitlyConstructed<::std::string> CalendarConfig::_i_give_permission_to_break_this_code_default_output_file_name_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CalendarConfig::kYearFieldNumber;
const int CalendarConfig::kMonthFieldNumber;
const int CalendarConfig::kCellWidthFieldNumber;
const int CalendarConfig::kCellHeightFieldNumber;
const int CalendarConfig::kCellMarginFieldNumber;
const int CalendarConfig::kLineWidthFieldNumber;
const int CalendarConfig::kOutputTypeFieldNumber;
const int CalendarConfig::kPaperTypeFieldNumber;
const int CalendarConfig::kLanguageFieldNumber;
const int CalendarConfig::kCoverageTypeFieldNumber;
const int CalendarConfig::kDurationTypeFieldNumber;
const int CalendarConfig::kDaysToRestFieldNumber;
const int CalendarConfig::kOutputFileNameFieldNumber;
const int CalendarConfig::kDefaultFontFamilyFieldNumber;
const int CalendarConfig::kDayNumberFontFamilyFieldNumber;
const int CalendarConfig::kDayNumberFontSizeFieldNumber;
const int CalendarConfig::kDayPlanFontFamilyFieldNumber;
const int CalendarConfig::kDayPlanFontSizeFieldNumber;
const int CalendarConfig::kMonthLabelFontFamilyFieldNumber;
const int CalendarConfig::kMonthLabelFontSizeFieldNumber;
const int CalendarConfig::kMonthLabelUppercaseFieldNumber;
const int CalendarConfig::kWdayLabelFontFamilyFieldNumber;
const int CalendarConfig::kWdayLabelFontSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CalendarConfig::CalendarConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_config_2eproto::scc_info_CalendarConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:config.CalendarConfig)
}
CalendarConfig::CalendarConfig(const CalendarConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      days_to_rest_(from.days_to_rest_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  output_file_name_.UnsafeSetDefault(&::config::CalendarConfig::_i_give_permission_to_break_this_code_default_output_file_name_.get());
  if (from.has_output_file_name()) {
    output_file_name_.AssignWithDefault(&::config::CalendarConfig::_i_give_permission_to_break_this_code_default_output_file_name_.get(), from.output_file_name_);
  }
  default_font_family_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_default_font_family()) {
    default_font_family_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.default_font_family_);
  }
  day_number_font_family_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_day_number_font_family()) {
    day_number_font_family_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.day_number_font_family_);
  }
  day_plan_font_family_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_day_plan_font_family()) {
    day_plan_font_family_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.day_plan_font_family_);
  }
  month_label_font_family_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_month_label_font_family()) {
    month_label_font_family_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.month_label_font_family_);
  }
  wday_label_font_family_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_wday_label_font_family()) {
    wday_label_font_family_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wday_label_font_family_);
  }
  ::memcpy(&year_, &from.year_,
    static_cast<size_t>(reinterpret_cast<char*>(&coverage_type_) -
    reinterpret_cast<char*>(&year_)) + sizeof(coverage_type_));
  // @@protoc_insertion_point(copy_constructor:config.CalendarConfig)
}

void CalendarConfig::SharedCtor() {
  output_file_name_.UnsafeSetDefault(&::config::CalendarConfig::_i_give_permission_to_break_this_code_default_output_file_name_.get());
  default_font_family_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  day_number_font_family_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  day_plan_font_family_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  month_label_font_family_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wday_label_font_family_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&year_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_type_) -
      reinterpret_cast<char*>(&year_)) + sizeof(duration_type_));
  coverage_type_ = 3;
}

CalendarConfig::~CalendarConfig() {
  // @@protoc_insertion_point(destructor:config.CalendarConfig)
  SharedDtor();
}

void CalendarConfig::SharedDtor() {
  output_file_name_.DestroyNoArena(&::config::CalendarConfig::_i_give_permission_to_break_this_code_default_output_file_name_.get());
  default_font_family_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  day_number_font_family_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  day_plan_font_family_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  month_label_font_family_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wday_label_font_family_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CalendarConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CalendarConfig::descriptor() {
  ::protobuf_config_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_config_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CalendarConfig& CalendarConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_config_2eproto::scc_info_CalendarConfig.base);
  return *internal_default_instance();
}


void CalendarConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:config.CalendarConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  days_to_rest_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      output_file_name_.UnsafeMutablePointer()->assign(*&::config::CalendarConfig::_i_give_permission_to_break_this_code_default_output_file_name_.get());
    }
    if (cached_has_bits & 0x00000002u) {
      default_font_family_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      day_number_font_family_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      day_plan_font_family_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      month_label_font_family_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      wday_label_font_family_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&year_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&month_) -
        reinterpret_cast<char*>(&year_)) + sizeof(month_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&cell_width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&language_) -
        reinterpret_cast<char*>(&cell_width_)) + sizeof(language_));
  }
  if (cached_has_bits & 4128768u) {
    ::memset(&month_label_uppercase_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_type_) -
        reinterpret_cast<char*>(&month_label_uppercase_)) + sizeof(duration_type_));
    coverage_type_ = 3;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CalendarConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:config.CalendarConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 year = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_year();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &year_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 month = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_month();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &month_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double cell_width = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_cell_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cell_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double cell_height = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_cell_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cell_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double cell_margin = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_cell_margin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cell_margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double line_width = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_line_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &line_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .config.OutputType output_type = 7 [default = SVG];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::config::OutputType_IsValid(value)) {
            set_output_type(static_cast< ::config::OutputType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                7, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .config.PaperType paper_type = 8 [default = US_LETTER];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::config::PaperType_IsValid(value)) {
            set_paper_type(static_cast< ::config::PaperType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                8, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .config.Language language = 9 [default = ENGLISH];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::config::Language_IsValid(value)) {
            set_language(static_cast< ::config::Language >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                9, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string output_file_name = 11 [default = "output"];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->output_file_name().data(), static_cast<int>(this->output_file_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "config.CalendarConfig.output_file_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string default_font_family = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_default_font_family()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->default_font_family().data(), static_cast<int>(this->default_font_family().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "config.CalendarConfig.default_font_family");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string day_number_font_family = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_day_number_font_family()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->day_number_font_family().data(), static_cast<int>(this->day_number_font_family().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "config.CalendarConfig.day_number_font_family");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double day_number_font_size = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {
          set_has_day_number_font_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &day_number_font_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string day_plan_font_family = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_day_plan_font_family()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->day_plan_font_family().data(), static_cast<int>(this->day_plan_font_family().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "config.CalendarConfig.day_plan_font_family");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double day_plan_font_size = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {
          set_has_day_plan_font_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &day_plan_font_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string month_label_font_family = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_month_label_font_family()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->month_label_font_family().data(), static_cast<int>(this->month_label_font_family().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "config.CalendarConfig.month_label_font_family");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double month_label_font_size = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u /* 145 & 0xFF */)) {
          set_has_month_label_font_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &month_label_font_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool month_label_uppercase = 19 [default = false];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_month_label_uppercase();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &month_label_uppercase_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string wday_label_font_family = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wday_label_font_family()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wday_label_font_family().data(), static_cast<int>(this->wday_label_font_family().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "config.CalendarConfig.wday_label_font_family");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double wday_label_font_size = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u /* 169 & 0xFF */)) {
          set_has_wday_label_font_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wday_label_font_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .config.CoverageType coverage_type = 22 [default = WHOLE_BIBLE];
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::config::CoverageType_IsValid(value)) {
            set_coverage_type(static_cast< ::config::CoverageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                22, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .config.DurationType duration_type = 23 [default = ONE_YEAR];
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::config::DurationType_IsValid(value)) {
            set_duration_type(static_cast< ::config::DurationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                23, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .config.DayOfTheWeek days_to_rest = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::config::DayOfTheWeek_IsValid(value)) {
            add_days_to_rest(static_cast< ::config::DayOfTheWeek >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                24, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 24,
                 ::config::DayOfTheWeek_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_days_to_rest())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:config.CalendarConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:config.CalendarConfig)
  return false;
#undef DO_
}

void CalendarConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:config.CalendarConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 year = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->year(), output);
  }

  // optional int32 month = 2;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->month(), output);
  }

  // optional double cell_width = 3;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->cell_width(), output);
  }

  // optional double cell_height = 4;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->cell_height(), output);
  }

  // optional double cell_margin = 5;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->cell_margin(), output);
  }

  // optional double line_width = 6;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->line_width(), output);
  }

  // optional .config.OutputType output_type = 7 [default = SVG];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->output_type(), output);
  }

  // optional .config.PaperType paper_type = 8 [default = US_LETTER];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->paper_type(), output);
  }

  // optional .config.Language language = 9 [default = ENGLISH];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->language(), output);
  }

  // optional string output_file_name = 11 [default = "output"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->output_file_name().data(), static_cast<int>(this->output_file_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.CalendarConfig.output_file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->output_file_name(), output);
  }

  // optional string default_font_family = 12;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->default_font_family().data(), static_cast<int>(this->default_font_family().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.CalendarConfig.default_font_family");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->default_font_family(), output);
  }

  // optional string day_number_font_family = 13;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->day_number_font_family().data(), static_cast<int>(this->day_number_font_family().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.CalendarConfig.day_number_font_family");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->day_number_font_family(), output);
  }

  // optional double day_number_font_size = 14;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->day_number_font_size(), output);
  }

  // optional string day_plan_font_family = 15;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->day_plan_font_family().data(), static_cast<int>(this->day_plan_font_family().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.CalendarConfig.day_plan_font_family");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->day_plan_font_family(), output);
  }

  // optional double day_plan_font_size = 16;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->day_plan_font_size(), output);
  }

  // optional string month_label_font_family = 17;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->month_label_font_family().data(), static_cast<int>(this->month_label_font_family().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.CalendarConfig.month_label_font_family");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->month_label_font_family(), output);
  }

  // optional double month_label_font_size = 18;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->month_label_font_size(), output);
  }

  // optional bool month_label_uppercase = 19 [default = false];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->month_label_uppercase(), output);
  }

  // optional string wday_label_font_family = 20;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wday_label_font_family().data(), static_cast<int>(this->wday_label_font_family().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.CalendarConfig.wday_label_font_family");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->wday_label_font_family(), output);
  }

  // optional double wday_label_font_size = 21;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->wday_label_font_size(), output);
  }

  // optional .config.CoverageType coverage_type = 22 [default = WHOLE_BIBLE];
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->coverage_type(), output);
  }

  // optional .config.DurationType duration_type = 23 [default = ONE_YEAR];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      23, this->duration_type(), output);
  }

  // repeated .config.DayOfTheWeek days_to_rest = 24;
  for (int i = 0, n = this->days_to_rest_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      24, this->days_to_rest(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:config.CalendarConfig)
}

::google::protobuf::uint8* CalendarConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:config.CalendarConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 year = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->year(), target);
  }

  // optional int32 month = 2;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->month(), target);
  }

  // optional double cell_width = 3;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->cell_width(), target);
  }

  // optional double cell_height = 4;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->cell_height(), target);
  }

  // optional double cell_margin = 5;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->cell_margin(), target);
  }

  // optional double line_width = 6;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->line_width(), target);
  }

  // optional .config.OutputType output_type = 7 [default = SVG];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->output_type(), target);
  }

  // optional .config.PaperType paper_type = 8 [default = US_LETTER];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->paper_type(), target);
  }

  // optional .config.Language language = 9 [default = ENGLISH];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->language(), target);
  }

  // optional string output_file_name = 11 [default = "output"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->output_file_name().data(), static_cast<int>(this->output_file_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.CalendarConfig.output_file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->output_file_name(), target);
  }

  // optional string default_font_family = 12;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->default_font_family().data(), static_cast<int>(this->default_font_family().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.CalendarConfig.default_font_family");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->default_font_family(), target);
  }

  // optional string day_number_font_family = 13;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->day_number_font_family().data(), static_cast<int>(this->day_number_font_family().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.CalendarConfig.day_number_font_family");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->day_number_font_family(), target);
  }

  // optional double day_number_font_size = 14;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->day_number_font_size(), target);
  }

  // optional string day_plan_font_family = 15;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->day_plan_font_family().data(), static_cast<int>(this->day_plan_font_family().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.CalendarConfig.day_plan_font_family");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->day_plan_font_family(), target);
  }

  // optional double day_plan_font_size = 16;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->day_plan_font_size(), target);
  }

  // optional string month_label_font_family = 17;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->month_label_font_family().data(), static_cast<int>(this->month_label_font_family().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.CalendarConfig.month_label_font_family");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->month_label_font_family(), target);
  }

  // optional double month_label_font_size = 18;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->month_label_font_size(), target);
  }

  // optional bool month_label_uppercase = 19 [default = false];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->month_label_uppercase(), target);
  }

  // optional string wday_label_font_family = 20;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wday_label_font_family().data(), static_cast<int>(this->wday_label_font_family().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.CalendarConfig.wday_label_font_family");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->wday_label_font_family(), target);
  }

  // optional double wday_label_font_size = 21;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->wday_label_font_size(), target);
  }

  // optional .config.CoverageType coverage_type = 22 [default = WHOLE_BIBLE];
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->coverage_type(), target);
  }

  // optional .config.DurationType duration_type = 23 [default = ONE_YEAR];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      23, this->duration_type(), target);
  }

  // repeated .config.DayOfTheWeek days_to_rest = 24;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    24, this->days_to_rest_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:config.CalendarConfig)
  return target;
}

size_t CalendarConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:config.CalendarConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .config.DayOfTheWeek days_to_rest = 24;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->days_to_rest_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->days_to_rest(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string output_file_name = 11 [default = "output"];
    if (has_output_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->output_file_name());
    }

    // optional string default_font_family = 12;
    if (has_default_font_family()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->default_font_family());
    }

    // optional string day_number_font_family = 13;
    if (has_day_number_font_family()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->day_number_font_family());
    }

    // optional string day_plan_font_family = 15;
    if (has_day_plan_font_family()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->day_plan_font_family());
    }

    // optional string month_label_font_family = 17;
    if (has_month_label_font_family()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->month_label_font_family());
    }

    // optional string wday_label_font_family = 20;
    if (has_wday_label_font_family()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wday_label_font_family());
    }

    // optional int32 year = 1;
    if (has_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->year());
    }

    // optional int32 month = 2;
    if (has_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->month());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double cell_width = 3;
    if (has_cell_width()) {
      total_size += 1 + 8;
    }

    // optional double cell_height = 4;
    if (has_cell_height()) {
      total_size += 1 + 8;
    }

    // optional double cell_margin = 5;
    if (has_cell_margin()) {
      total_size += 1 + 8;
    }

    // optional double line_width = 6;
    if (has_line_width()) {
      total_size += 1 + 8;
    }

    // optional .config.OutputType output_type = 7 [default = SVG];
    if (has_output_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->output_type());
    }

    // optional .config.PaperType paper_type = 8 [default = US_LETTER];
    if (has_paper_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->paper_type());
    }

    // optional double day_number_font_size = 14;
    if (has_day_number_font_size()) {
      total_size += 1 + 8;
    }

    // optional .config.Language language = 9 [default = ENGLISH];
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->language());
    }

  }
  if (_has_bits_[16 / 32] & 4128768u) {
    // optional bool month_label_uppercase = 19 [default = false];
    if (has_month_label_uppercase()) {
      total_size += 2 + 1;
    }

    // optional double day_plan_font_size = 16;
    if (has_day_plan_font_size()) {
      total_size += 2 + 8;
    }

    // optional double month_label_font_size = 18;
    if (has_month_label_font_size()) {
      total_size += 2 + 8;
    }

    // optional double wday_label_font_size = 21;
    if (has_wday_label_font_size()) {
      total_size += 2 + 8;
    }

    // optional .config.DurationType duration_type = 23 [default = ONE_YEAR];
    if (has_duration_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->duration_type());
    }

    // optional .config.CoverageType coverage_type = 22 [default = WHOLE_BIBLE];
    if (has_coverage_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->coverage_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CalendarConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:config.CalendarConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CalendarConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CalendarConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:config.CalendarConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:config.CalendarConfig)
    MergeFrom(*source);
  }
}

void CalendarConfig::MergeFrom(const CalendarConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:config.CalendarConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  days_to_rest_.MergeFrom(from.days_to_rest_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_output_file_name();
      output_file_name_.AssignWithDefault(&::config::CalendarConfig::_i_give_permission_to_break_this_code_default_output_file_name_.get(), from.output_file_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_default_font_family();
      default_font_family_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.default_font_family_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_day_number_font_family();
      day_number_font_family_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.day_number_font_family_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_day_plan_font_family();
      day_plan_font_family_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.day_plan_font_family_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_month_label_font_family();
      month_label_font_family_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.month_label_font_family_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_wday_label_font_family();
      wday_label_font_family_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wday_label_font_family_);
    }
    if (cached_has_bits & 0x00000040u) {
      year_ = from.year_;
    }
    if (cached_has_bits & 0x00000080u) {
      month_ = from.month_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      cell_width_ = from.cell_width_;
    }
    if (cached_has_bits & 0x00000200u) {
      cell_height_ = from.cell_height_;
    }
    if (cached_has_bits & 0x00000400u) {
      cell_margin_ = from.cell_margin_;
    }
    if (cached_has_bits & 0x00000800u) {
      line_width_ = from.line_width_;
    }
    if (cached_has_bits & 0x00001000u) {
      output_type_ = from.output_type_;
    }
    if (cached_has_bits & 0x00002000u) {
      paper_type_ = from.paper_type_;
    }
    if (cached_has_bits & 0x00004000u) {
      day_number_font_size_ = from.day_number_font_size_;
    }
    if (cached_has_bits & 0x00008000u) {
      language_ = from.language_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4128768u) {
    if (cached_has_bits & 0x00010000u) {
      month_label_uppercase_ = from.month_label_uppercase_;
    }
    if (cached_has_bits & 0x00020000u) {
      day_plan_font_size_ = from.day_plan_font_size_;
    }
    if (cached_has_bits & 0x00040000u) {
      month_label_font_size_ = from.month_label_font_size_;
    }
    if (cached_has_bits & 0x00080000u) {
      wday_label_font_size_ = from.wday_label_font_size_;
    }
    if (cached_has_bits & 0x00100000u) {
      duration_type_ = from.duration_type_;
    }
    if (cached_has_bits & 0x00200000u) {
      coverage_type_ = from.coverage_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CalendarConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:config.CalendarConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalendarConfig::CopyFrom(const CalendarConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:config.CalendarConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalendarConfig::IsInitialized() const {
  return true;
}

void CalendarConfig::Swap(CalendarConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CalendarConfig::InternalSwap(CalendarConfig* other) {
  using std::swap;
  days_to_rest_.InternalSwap(&other->days_to_rest_);
  output_file_name_.Swap(&other->output_file_name_, &::config::CalendarConfig::_i_give_permission_to_break_this_code_default_output_file_name_.get(),
    GetArenaNoVirtual());
  default_font_family_.Swap(&other->default_font_family_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  day_number_font_family_.Swap(&other->day_number_font_family_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  day_plan_font_family_.Swap(&other->day_plan_font_family_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  month_label_font_family_.Swap(&other->month_label_font_family_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  wday_label_font_family_.Swap(&other->wday_label_font_family_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(year_, other->year_);
  swap(month_, other->month_);
  swap(cell_width_, other->cell_width_);
  swap(cell_height_, other->cell_height_);
  swap(cell_margin_, other->cell_margin_);
  swap(line_width_, other->line_width_);
  swap(output_type_, other->output_type_);
  swap(paper_type_, other->paper_type_);
  swap(day_number_font_size_, other->day_number_font_size_);
  swap(language_, other->language_);
  swap(month_label_uppercase_, other->month_label_uppercase_);
  swap(day_plan_font_size_, other->day_plan_font_size_);
  swap(month_label_font_size_, other->month_label_font_size_);
  swap(wday_label_font_size_, other->wday_label_font_size_);
  swap(duration_type_, other->duration_type_);
  swap(coverage_type_, other->coverage_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CalendarConfig::GetMetadata() const {
  protobuf_config_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_config_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace config
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::config::CalendarConfig* Arena::CreateMaybeMessage< ::config::CalendarConfig >(Arena* arena) {
  return Arena::CreateInternal< ::config::CalendarConfig >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
