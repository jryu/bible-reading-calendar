// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#ifndef PROTOBUF_INCLUDED_config_2eproto
#define PROTOBUF_INCLUDED_config_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_config_2eproto 

namespace protobuf_config_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_config_2eproto
namespace config {
class CalendarConfig;
class CalendarConfigDefaultTypeInternal;
extern CalendarConfigDefaultTypeInternal _CalendarConfig_default_instance_;
}  // namespace config
namespace google {
namespace protobuf {
template<> ::config::CalendarConfig* Arena::CreateMaybeMessage<::config::CalendarConfig>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace config {

enum OutputType {
  SVG = 0,
  PDF = 1,
  PNG = 2
};
bool OutputType_IsValid(int value);
const OutputType OutputType_MIN = SVG;
const OutputType OutputType_MAX = PNG;
const int OutputType_ARRAYSIZE = OutputType_MAX + 1;

const ::google::protobuf::EnumDescriptor* OutputType_descriptor();
inline const ::std::string& OutputType_Name(OutputType value) {
  return ::google::protobuf::internal::NameOfEnum(
    OutputType_descriptor(), value);
}
inline bool OutputType_Parse(
    const ::std::string& name, OutputType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OutputType>(
    OutputType_descriptor(), name, value);
}
enum PaperType {
  US_LETTER = 0,
  A4 = 1
};
bool PaperType_IsValid(int value);
const PaperType PaperType_MIN = US_LETTER;
const PaperType PaperType_MAX = A4;
const int PaperType_ARRAYSIZE = PaperType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PaperType_descriptor();
inline const ::std::string& PaperType_Name(PaperType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PaperType_descriptor(), value);
}
inline bool PaperType_Parse(
    const ::std::string& name, PaperType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PaperType>(
    PaperType_descriptor(), name, value);
}
enum Language {
  ENGLISH = 0,
  KOREAN = 1
};
bool Language_IsValid(int value);
const Language Language_MIN = ENGLISH;
const Language Language_MAX = KOREAN;
const int Language_ARRAYSIZE = Language_MAX + 1;

const ::google::protobuf::EnumDescriptor* Language_descriptor();
inline const ::std::string& Language_Name(Language value) {
  return ::google::protobuf::internal::NameOfEnum(
    Language_descriptor(), value);
}
inline bool Language_Parse(
    const ::std::string& name, Language* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Language>(
    Language_descriptor(), name, value);
}
enum PlanType {
  ONE_YEAR = 0,
  NEW_TESTAMENT_AND_PSALMS = 1
};
bool PlanType_IsValid(int value);
const PlanType PlanType_MIN = ONE_YEAR;
const PlanType PlanType_MAX = NEW_TESTAMENT_AND_PSALMS;
const int PlanType_ARRAYSIZE = PlanType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlanType_descriptor();
inline const ::std::string& PlanType_Name(PlanType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlanType_descriptor(), value);
}
inline bool PlanType_Parse(
    const ::std::string& name, PlanType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlanType>(
    PlanType_descriptor(), name, value);
}
// ===================================================================

class CalendarConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:config.CalendarConfig) */ {
 public:
  CalendarConfig();
  virtual ~CalendarConfig();

  CalendarConfig(const CalendarConfig& from);

  inline CalendarConfig& operator=(const CalendarConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CalendarConfig(CalendarConfig&& from) noexcept
    : CalendarConfig() {
    *this = ::std::move(from);
  }

  inline CalendarConfig& operator=(CalendarConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CalendarConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CalendarConfig* internal_default_instance() {
    return reinterpret_cast<const CalendarConfig*>(
               &_CalendarConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CalendarConfig* other);
  friend void swap(CalendarConfig& a, CalendarConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CalendarConfig* New() const final {
    return CreateMaybeMessage<CalendarConfig>(NULL);
  }

  CalendarConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CalendarConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CalendarConfig& from);
  void MergeFrom(const CalendarConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalendarConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string output_file_name = 11 [default = "output"];
  bool has_output_file_name() const;
  void clear_output_file_name();
  static const int kOutputFileNameFieldNumber = 11;
  const ::std::string& output_file_name() const;
  void set_output_file_name(const ::std::string& value);
  #if LANG_CXX11
  void set_output_file_name(::std::string&& value);
  #endif
  void set_output_file_name(const char* value);
  void set_output_file_name(const char* value, size_t size);
  ::std::string* mutable_output_file_name();
  ::std::string* release_output_file_name();
  void set_allocated_output_file_name(::std::string* output_file_name);

  // optional string default_font_family = 12;
  bool has_default_font_family() const;
  void clear_default_font_family();
  static const int kDefaultFontFamilyFieldNumber = 12;
  const ::std::string& default_font_family() const;
  void set_default_font_family(const ::std::string& value);
  #if LANG_CXX11
  void set_default_font_family(::std::string&& value);
  #endif
  void set_default_font_family(const char* value);
  void set_default_font_family(const char* value, size_t size);
  ::std::string* mutable_default_font_family();
  ::std::string* release_default_font_family();
  void set_allocated_default_font_family(::std::string* default_font_family);

  // optional string day_number_font_family = 13;
  bool has_day_number_font_family() const;
  void clear_day_number_font_family();
  static const int kDayNumberFontFamilyFieldNumber = 13;
  const ::std::string& day_number_font_family() const;
  void set_day_number_font_family(const ::std::string& value);
  #if LANG_CXX11
  void set_day_number_font_family(::std::string&& value);
  #endif
  void set_day_number_font_family(const char* value);
  void set_day_number_font_family(const char* value, size_t size);
  ::std::string* mutable_day_number_font_family();
  ::std::string* release_day_number_font_family();
  void set_allocated_day_number_font_family(::std::string* day_number_font_family);

  // optional string day_plan_font_family = 15;
  bool has_day_plan_font_family() const;
  void clear_day_plan_font_family();
  static const int kDayPlanFontFamilyFieldNumber = 15;
  const ::std::string& day_plan_font_family() const;
  void set_day_plan_font_family(const ::std::string& value);
  #if LANG_CXX11
  void set_day_plan_font_family(::std::string&& value);
  #endif
  void set_day_plan_font_family(const char* value);
  void set_day_plan_font_family(const char* value, size_t size);
  ::std::string* mutable_day_plan_font_family();
  ::std::string* release_day_plan_font_family();
  void set_allocated_day_plan_font_family(::std::string* day_plan_font_family);

  // optional string month_label_font_family = 17;
  bool has_month_label_font_family() const;
  void clear_month_label_font_family();
  static const int kMonthLabelFontFamilyFieldNumber = 17;
  const ::std::string& month_label_font_family() const;
  void set_month_label_font_family(const ::std::string& value);
  #if LANG_CXX11
  void set_month_label_font_family(::std::string&& value);
  #endif
  void set_month_label_font_family(const char* value);
  void set_month_label_font_family(const char* value, size_t size);
  ::std::string* mutable_month_label_font_family();
  ::std::string* release_month_label_font_family();
  void set_allocated_month_label_font_family(::std::string* month_label_font_family);

  // optional string wday_label_font_family = 20;
  bool has_wday_label_font_family() const;
  void clear_wday_label_font_family();
  static const int kWdayLabelFontFamilyFieldNumber = 20;
  const ::std::string& wday_label_font_family() const;
  void set_wday_label_font_family(const ::std::string& value);
  #if LANG_CXX11
  void set_wday_label_font_family(::std::string&& value);
  #endif
  void set_wday_label_font_family(const char* value);
  void set_wday_label_font_family(const char* value, size_t size);
  ::std::string* mutable_wday_label_font_family();
  ::std::string* release_wday_label_font_family();
  void set_allocated_wday_label_font_family(::std::string* wday_label_font_family);

  // optional int32 year = 1;
  bool has_year() const;
  void clear_year();
  static const int kYearFieldNumber = 1;
  ::google::protobuf::int32 year() const;
  void set_year(::google::protobuf::int32 value);

  // optional int32 month = 2;
  bool has_month() const;
  void clear_month();
  static const int kMonthFieldNumber = 2;
  ::google::protobuf::int32 month() const;
  void set_month(::google::protobuf::int32 value);

  // optional double cell_width = 3;
  bool has_cell_width() const;
  void clear_cell_width();
  static const int kCellWidthFieldNumber = 3;
  double cell_width() const;
  void set_cell_width(double value);

  // optional double cell_height = 4;
  bool has_cell_height() const;
  void clear_cell_height();
  static const int kCellHeightFieldNumber = 4;
  double cell_height() const;
  void set_cell_height(double value);

  // optional double cell_margin = 5;
  bool has_cell_margin() const;
  void clear_cell_margin();
  static const int kCellMarginFieldNumber = 5;
  double cell_margin() const;
  void set_cell_margin(double value);

  // optional double line_width = 6;
  bool has_line_width() const;
  void clear_line_width();
  static const int kLineWidthFieldNumber = 6;
  double line_width() const;
  void set_line_width(double value);

  // optional .config.OutputType output_type = 7 [default = SVG];
  bool has_output_type() const;
  void clear_output_type();
  static const int kOutputTypeFieldNumber = 7;
  ::config::OutputType output_type() const;
  void set_output_type(::config::OutputType value);

  // optional .config.PaperType paper_type = 8 [default = US_LETTER];
  bool has_paper_type() const;
  void clear_paper_type();
  static const int kPaperTypeFieldNumber = 8;
  ::config::PaperType paper_type() const;
  void set_paper_type(::config::PaperType value);

  // optional .config.Language language = 9 [default = ENGLISH];
  bool has_language() const;
  void clear_language();
  static const int kLanguageFieldNumber = 9;
  ::config::Language language() const;
  void set_language(::config::Language value);

  // optional .config.PlanType plan_type = 10 [default = ONE_YEAR];
  bool has_plan_type() const;
  void clear_plan_type();
  static const int kPlanTypeFieldNumber = 10;
  ::config::PlanType plan_type() const;
  void set_plan_type(::config::PlanType value);

  // optional double day_number_font_size = 14;
  bool has_day_number_font_size() const;
  void clear_day_number_font_size();
  static const int kDayNumberFontSizeFieldNumber = 14;
  double day_number_font_size() const;
  void set_day_number_font_size(double value);

  // optional double day_plan_font_size = 16;
  bool has_day_plan_font_size() const;
  void clear_day_plan_font_size();
  static const int kDayPlanFontSizeFieldNumber = 16;
  double day_plan_font_size() const;
  void set_day_plan_font_size(double value);

  // optional double month_label_font_size = 18;
  bool has_month_label_font_size() const;
  void clear_month_label_font_size();
  static const int kMonthLabelFontSizeFieldNumber = 18;
  double month_label_font_size() const;
  void set_month_label_font_size(double value);

  // optional double wday_label_font_size = 21;
  bool has_wday_label_font_size() const;
  void clear_wday_label_font_size();
  static const int kWdayLabelFontSizeFieldNumber = 21;
  double wday_label_font_size() const;
  void set_wday_label_font_size(double value);

  // optional bool month_label_uppercase = 19 [default = false];
  bool has_month_label_uppercase() const;
  void clear_month_label_uppercase();
  static const int kMonthLabelUppercaseFieldNumber = 19;
  bool month_label_uppercase() const;
  void set_month_label_uppercase(bool value);

  // @@protoc_insertion_point(class_scope:config.CalendarConfig)
 private:
  void set_has_year();
  void clear_has_year();
  void set_has_month();
  void clear_has_month();
  void set_has_cell_width();
  void clear_has_cell_width();
  void set_has_cell_height();
  void clear_has_cell_height();
  void set_has_cell_margin();
  void clear_has_cell_margin();
  void set_has_line_width();
  void clear_has_line_width();
  void set_has_output_type();
  void clear_has_output_type();
  void set_has_paper_type();
  void clear_has_paper_type();
  void set_has_language();
  void clear_has_language();
  void set_has_plan_type();
  void clear_has_plan_type();
  void set_has_output_file_name();
  void clear_has_output_file_name();
  void set_has_default_font_family();
  void clear_has_default_font_family();
  void set_has_day_number_font_family();
  void clear_has_day_number_font_family();
  void set_has_day_number_font_size();
  void clear_has_day_number_font_size();
  void set_has_day_plan_font_family();
  void clear_has_day_plan_font_family();
  void set_has_day_plan_font_size();
  void clear_has_day_plan_font_size();
  void set_has_month_label_font_family();
  void clear_has_month_label_font_family();
  void set_has_month_label_font_size();
  void clear_has_month_label_font_size();
  void set_has_month_label_uppercase();
  void clear_has_month_label_uppercase();
  void set_has_wday_label_font_family();
  void clear_has_wday_label_font_family();
  void set_has_wday_label_font_size();
  void clear_has_wday_label_font_size();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  public:
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _i_give_permission_to_break_this_code_default_output_file_name_;
  private:
  ::google::protobuf::internal::ArenaStringPtr output_file_name_;
  ::google::protobuf::internal::ArenaStringPtr default_font_family_;
  ::google::protobuf::internal::ArenaStringPtr day_number_font_family_;
  ::google::protobuf::internal::ArenaStringPtr day_plan_font_family_;
  ::google::protobuf::internal::ArenaStringPtr month_label_font_family_;
  ::google::protobuf::internal::ArenaStringPtr wday_label_font_family_;
  ::google::protobuf::int32 year_;
  ::google::protobuf::int32 month_;
  double cell_width_;
  double cell_height_;
  double cell_margin_;
  double line_width_;
  int output_type_;
  int paper_type_;
  int language_;
  int plan_type_;
  double day_number_font_size_;
  double day_plan_font_size_;
  double month_label_font_size_;
  double wday_label_font_size_;
  bool month_label_uppercase_;
  friend struct ::protobuf_config_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CalendarConfig

// optional int32 year = 1;
inline bool CalendarConfig::has_year() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CalendarConfig::set_has_year() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CalendarConfig::clear_has_year() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CalendarConfig::clear_year() {
  year_ = 0;
  clear_has_year();
}
inline ::google::protobuf::int32 CalendarConfig::year() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.year)
  return year_;
}
inline void CalendarConfig::set_year(::google::protobuf::int32 value) {
  set_has_year();
  year_ = value;
  // @@protoc_insertion_point(field_set:config.CalendarConfig.year)
}

// optional int32 month = 2;
inline bool CalendarConfig::has_month() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CalendarConfig::set_has_month() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CalendarConfig::clear_has_month() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CalendarConfig::clear_month() {
  month_ = 0;
  clear_has_month();
}
inline ::google::protobuf::int32 CalendarConfig::month() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.month)
  return month_;
}
inline void CalendarConfig::set_month(::google::protobuf::int32 value) {
  set_has_month();
  month_ = value;
  // @@protoc_insertion_point(field_set:config.CalendarConfig.month)
}

// optional double cell_width = 3;
inline bool CalendarConfig::has_cell_width() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CalendarConfig::set_has_cell_width() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CalendarConfig::clear_has_cell_width() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CalendarConfig::clear_cell_width() {
  cell_width_ = 0;
  clear_has_cell_width();
}
inline double CalendarConfig::cell_width() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.cell_width)
  return cell_width_;
}
inline void CalendarConfig::set_cell_width(double value) {
  set_has_cell_width();
  cell_width_ = value;
  // @@protoc_insertion_point(field_set:config.CalendarConfig.cell_width)
}

// optional double cell_height = 4;
inline bool CalendarConfig::has_cell_height() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CalendarConfig::set_has_cell_height() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CalendarConfig::clear_has_cell_height() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CalendarConfig::clear_cell_height() {
  cell_height_ = 0;
  clear_has_cell_height();
}
inline double CalendarConfig::cell_height() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.cell_height)
  return cell_height_;
}
inline void CalendarConfig::set_cell_height(double value) {
  set_has_cell_height();
  cell_height_ = value;
  // @@protoc_insertion_point(field_set:config.CalendarConfig.cell_height)
}

// optional double cell_margin = 5;
inline bool CalendarConfig::has_cell_margin() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CalendarConfig::set_has_cell_margin() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CalendarConfig::clear_has_cell_margin() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CalendarConfig::clear_cell_margin() {
  cell_margin_ = 0;
  clear_has_cell_margin();
}
inline double CalendarConfig::cell_margin() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.cell_margin)
  return cell_margin_;
}
inline void CalendarConfig::set_cell_margin(double value) {
  set_has_cell_margin();
  cell_margin_ = value;
  // @@protoc_insertion_point(field_set:config.CalendarConfig.cell_margin)
}

// optional double line_width = 6;
inline bool CalendarConfig::has_line_width() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CalendarConfig::set_has_line_width() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CalendarConfig::clear_has_line_width() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CalendarConfig::clear_line_width() {
  line_width_ = 0;
  clear_has_line_width();
}
inline double CalendarConfig::line_width() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.line_width)
  return line_width_;
}
inline void CalendarConfig::set_line_width(double value) {
  set_has_line_width();
  line_width_ = value;
  // @@protoc_insertion_point(field_set:config.CalendarConfig.line_width)
}

// optional .config.OutputType output_type = 7 [default = SVG];
inline bool CalendarConfig::has_output_type() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CalendarConfig::set_has_output_type() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CalendarConfig::clear_has_output_type() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CalendarConfig::clear_output_type() {
  output_type_ = 0;
  clear_has_output_type();
}
inline ::config::OutputType CalendarConfig::output_type() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.output_type)
  return static_cast< ::config::OutputType >(output_type_);
}
inline void CalendarConfig::set_output_type(::config::OutputType value) {
  assert(::config::OutputType_IsValid(value));
  set_has_output_type();
  output_type_ = value;
  // @@protoc_insertion_point(field_set:config.CalendarConfig.output_type)
}

// optional .config.PaperType paper_type = 8 [default = US_LETTER];
inline bool CalendarConfig::has_paper_type() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CalendarConfig::set_has_paper_type() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CalendarConfig::clear_has_paper_type() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CalendarConfig::clear_paper_type() {
  paper_type_ = 0;
  clear_has_paper_type();
}
inline ::config::PaperType CalendarConfig::paper_type() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.paper_type)
  return static_cast< ::config::PaperType >(paper_type_);
}
inline void CalendarConfig::set_paper_type(::config::PaperType value) {
  assert(::config::PaperType_IsValid(value));
  set_has_paper_type();
  paper_type_ = value;
  // @@protoc_insertion_point(field_set:config.CalendarConfig.paper_type)
}

// optional .config.Language language = 9 [default = ENGLISH];
inline bool CalendarConfig::has_language() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CalendarConfig::set_has_language() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CalendarConfig::clear_has_language() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CalendarConfig::clear_language() {
  language_ = 0;
  clear_has_language();
}
inline ::config::Language CalendarConfig::language() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.language)
  return static_cast< ::config::Language >(language_);
}
inline void CalendarConfig::set_language(::config::Language value) {
  assert(::config::Language_IsValid(value));
  set_has_language();
  language_ = value;
  // @@protoc_insertion_point(field_set:config.CalendarConfig.language)
}

// optional .config.PlanType plan_type = 10 [default = ONE_YEAR];
inline bool CalendarConfig::has_plan_type() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CalendarConfig::set_has_plan_type() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CalendarConfig::clear_has_plan_type() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CalendarConfig::clear_plan_type() {
  plan_type_ = 0;
  clear_has_plan_type();
}
inline ::config::PlanType CalendarConfig::plan_type() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.plan_type)
  return static_cast< ::config::PlanType >(plan_type_);
}
inline void CalendarConfig::set_plan_type(::config::PlanType value) {
  assert(::config::PlanType_IsValid(value));
  set_has_plan_type();
  plan_type_ = value;
  // @@protoc_insertion_point(field_set:config.CalendarConfig.plan_type)
}

// optional string output_file_name = 11 [default = "output"];
inline bool CalendarConfig::has_output_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CalendarConfig::set_has_output_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CalendarConfig::clear_has_output_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CalendarConfig::clear_output_file_name() {
  output_file_name_.ClearToDefaultNoArena(&::config::CalendarConfig::_i_give_permission_to_break_this_code_default_output_file_name_.get());
  clear_has_output_file_name();
}
inline const ::std::string& CalendarConfig::output_file_name() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.output_file_name)
  return output_file_name_.GetNoArena();
}
inline void CalendarConfig::set_output_file_name(const ::std::string& value) {
  set_has_output_file_name();
  output_file_name_.SetNoArena(&::config::CalendarConfig::_i_give_permission_to_break_this_code_default_output_file_name_.get(), value);
  // @@protoc_insertion_point(field_set:config.CalendarConfig.output_file_name)
}
#if LANG_CXX11
inline void CalendarConfig::set_output_file_name(::std::string&& value) {
  set_has_output_file_name();
  output_file_name_.SetNoArena(
    &::config::CalendarConfig::_i_give_permission_to_break_this_code_default_output_file_name_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.CalendarConfig.output_file_name)
}
#endif
inline void CalendarConfig::set_output_file_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_output_file_name();
  output_file_name_.SetNoArena(&::config::CalendarConfig::_i_give_permission_to_break_this_code_default_output_file_name_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.CalendarConfig.output_file_name)
}
inline void CalendarConfig::set_output_file_name(const char* value, size_t size) {
  set_has_output_file_name();
  output_file_name_.SetNoArena(&::config::CalendarConfig::_i_give_permission_to_break_this_code_default_output_file_name_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.CalendarConfig.output_file_name)
}
inline ::std::string* CalendarConfig::mutable_output_file_name() {
  set_has_output_file_name();
  // @@protoc_insertion_point(field_mutable:config.CalendarConfig.output_file_name)
  return output_file_name_.MutableNoArena(&::config::CalendarConfig::_i_give_permission_to_break_this_code_default_output_file_name_.get());
}
inline ::std::string* CalendarConfig::release_output_file_name() {
  // @@protoc_insertion_point(field_release:config.CalendarConfig.output_file_name)
  if (!has_output_file_name()) {
    return NULL;
  }
  clear_has_output_file_name();
  return output_file_name_.ReleaseNonDefaultNoArena(&::config::CalendarConfig::_i_give_permission_to_break_this_code_default_output_file_name_.get());
}
inline void CalendarConfig::set_allocated_output_file_name(::std::string* output_file_name) {
  if (output_file_name != NULL) {
    set_has_output_file_name();
  } else {
    clear_has_output_file_name();
  }
  output_file_name_.SetAllocatedNoArena(&::config::CalendarConfig::_i_give_permission_to_break_this_code_default_output_file_name_.get(), output_file_name);
  // @@protoc_insertion_point(field_set_allocated:config.CalendarConfig.output_file_name)
}

// optional string default_font_family = 12;
inline bool CalendarConfig::has_default_font_family() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CalendarConfig::set_has_default_font_family() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CalendarConfig::clear_has_default_font_family() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CalendarConfig::clear_default_font_family() {
  default_font_family_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_default_font_family();
}
inline const ::std::string& CalendarConfig::default_font_family() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.default_font_family)
  return default_font_family_.GetNoArena();
}
inline void CalendarConfig::set_default_font_family(const ::std::string& value) {
  set_has_default_font_family();
  default_font_family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.CalendarConfig.default_font_family)
}
#if LANG_CXX11
inline void CalendarConfig::set_default_font_family(::std::string&& value) {
  set_has_default_font_family();
  default_font_family_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.CalendarConfig.default_font_family)
}
#endif
inline void CalendarConfig::set_default_font_family(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_default_font_family();
  default_font_family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.CalendarConfig.default_font_family)
}
inline void CalendarConfig::set_default_font_family(const char* value, size_t size) {
  set_has_default_font_family();
  default_font_family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.CalendarConfig.default_font_family)
}
inline ::std::string* CalendarConfig::mutable_default_font_family() {
  set_has_default_font_family();
  // @@protoc_insertion_point(field_mutable:config.CalendarConfig.default_font_family)
  return default_font_family_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CalendarConfig::release_default_font_family() {
  // @@protoc_insertion_point(field_release:config.CalendarConfig.default_font_family)
  if (!has_default_font_family()) {
    return NULL;
  }
  clear_has_default_font_family();
  return default_font_family_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CalendarConfig::set_allocated_default_font_family(::std::string* default_font_family) {
  if (default_font_family != NULL) {
    set_has_default_font_family();
  } else {
    clear_has_default_font_family();
  }
  default_font_family_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), default_font_family);
  // @@protoc_insertion_point(field_set_allocated:config.CalendarConfig.default_font_family)
}

// optional string day_number_font_family = 13;
inline bool CalendarConfig::has_day_number_font_family() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CalendarConfig::set_has_day_number_font_family() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CalendarConfig::clear_has_day_number_font_family() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CalendarConfig::clear_day_number_font_family() {
  day_number_font_family_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_day_number_font_family();
}
inline const ::std::string& CalendarConfig::day_number_font_family() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.day_number_font_family)
  return day_number_font_family_.GetNoArena();
}
inline void CalendarConfig::set_day_number_font_family(const ::std::string& value) {
  set_has_day_number_font_family();
  day_number_font_family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.CalendarConfig.day_number_font_family)
}
#if LANG_CXX11
inline void CalendarConfig::set_day_number_font_family(::std::string&& value) {
  set_has_day_number_font_family();
  day_number_font_family_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.CalendarConfig.day_number_font_family)
}
#endif
inline void CalendarConfig::set_day_number_font_family(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_day_number_font_family();
  day_number_font_family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.CalendarConfig.day_number_font_family)
}
inline void CalendarConfig::set_day_number_font_family(const char* value, size_t size) {
  set_has_day_number_font_family();
  day_number_font_family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.CalendarConfig.day_number_font_family)
}
inline ::std::string* CalendarConfig::mutable_day_number_font_family() {
  set_has_day_number_font_family();
  // @@protoc_insertion_point(field_mutable:config.CalendarConfig.day_number_font_family)
  return day_number_font_family_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CalendarConfig::release_day_number_font_family() {
  // @@protoc_insertion_point(field_release:config.CalendarConfig.day_number_font_family)
  if (!has_day_number_font_family()) {
    return NULL;
  }
  clear_has_day_number_font_family();
  return day_number_font_family_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CalendarConfig::set_allocated_day_number_font_family(::std::string* day_number_font_family) {
  if (day_number_font_family != NULL) {
    set_has_day_number_font_family();
  } else {
    clear_has_day_number_font_family();
  }
  day_number_font_family_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), day_number_font_family);
  // @@protoc_insertion_point(field_set_allocated:config.CalendarConfig.day_number_font_family)
}

// optional double day_number_font_size = 14;
inline bool CalendarConfig::has_day_number_font_size() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CalendarConfig::set_has_day_number_font_size() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CalendarConfig::clear_has_day_number_font_size() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CalendarConfig::clear_day_number_font_size() {
  day_number_font_size_ = 0;
  clear_has_day_number_font_size();
}
inline double CalendarConfig::day_number_font_size() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.day_number_font_size)
  return day_number_font_size_;
}
inline void CalendarConfig::set_day_number_font_size(double value) {
  set_has_day_number_font_size();
  day_number_font_size_ = value;
  // @@protoc_insertion_point(field_set:config.CalendarConfig.day_number_font_size)
}

// optional string day_plan_font_family = 15;
inline bool CalendarConfig::has_day_plan_font_family() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CalendarConfig::set_has_day_plan_font_family() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CalendarConfig::clear_has_day_plan_font_family() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CalendarConfig::clear_day_plan_font_family() {
  day_plan_font_family_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_day_plan_font_family();
}
inline const ::std::string& CalendarConfig::day_plan_font_family() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.day_plan_font_family)
  return day_plan_font_family_.GetNoArena();
}
inline void CalendarConfig::set_day_plan_font_family(const ::std::string& value) {
  set_has_day_plan_font_family();
  day_plan_font_family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.CalendarConfig.day_plan_font_family)
}
#if LANG_CXX11
inline void CalendarConfig::set_day_plan_font_family(::std::string&& value) {
  set_has_day_plan_font_family();
  day_plan_font_family_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.CalendarConfig.day_plan_font_family)
}
#endif
inline void CalendarConfig::set_day_plan_font_family(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_day_plan_font_family();
  day_plan_font_family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.CalendarConfig.day_plan_font_family)
}
inline void CalendarConfig::set_day_plan_font_family(const char* value, size_t size) {
  set_has_day_plan_font_family();
  day_plan_font_family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.CalendarConfig.day_plan_font_family)
}
inline ::std::string* CalendarConfig::mutable_day_plan_font_family() {
  set_has_day_plan_font_family();
  // @@protoc_insertion_point(field_mutable:config.CalendarConfig.day_plan_font_family)
  return day_plan_font_family_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CalendarConfig::release_day_plan_font_family() {
  // @@protoc_insertion_point(field_release:config.CalendarConfig.day_plan_font_family)
  if (!has_day_plan_font_family()) {
    return NULL;
  }
  clear_has_day_plan_font_family();
  return day_plan_font_family_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CalendarConfig::set_allocated_day_plan_font_family(::std::string* day_plan_font_family) {
  if (day_plan_font_family != NULL) {
    set_has_day_plan_font_family();
  } else {
    clear_has_day_plan_font_family();
  }
  day_plan_font_family_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), day_plan_font_family);
  // @@protoc_insertion_point(field_set_allocated:config.CalendarConfig.day_plan_font_family)
}

// optional double day_plan_font_size = 16;
inline bool CalendarConfig::has_day_plan_font_size() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CalendarConfig::set_has_day_plan_font_size() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CalendarConfig::clear_has_day_plan_font_size() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CalendarConfig::clear_day_plan_font_size() {
  day_plan_font_size_ = 0;
  clear_has_day_plan_font_size();
}
inline double CalendarConfig::day_plan_font_size() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.day_plan_font_size)
  return day_plan_font_size_;
}
inline void CalendarConfig::set_day_plan_font_size(double value) {
  set_has_day_plan_font_size();
  day_plan_font_size_ = value;
  // @@protoc_insertion_point(field_set:config.CalendarConfig.day_plan_font_size)
}

// optional string month_label_font_family = 17;
inline bool CalendarConfig::has_month_label_font_family() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CalendarConfig::set_has_month_label_font_family() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CalendarConfig::clear_has_month_label_font_family() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CalendarConfig::clear_month_label_font_family() {
  month_label_font_family_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_month_label_font_family();
}
inline const ::std::string& CalendarConfig::month_label_font_family() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.month_label_font_family)
  return month_label_font_family_.GetNoArena();
}
inline void CalendarConfig::set_month_label_font_family(const ::std::string& value) {
  set_has_month_label_font_family();
  month_label_font_family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.CalendarConfig.month_label_font_family)
}
#if LANG_CXX11
inline void CalendarConfig::set_month_label_font_family(::std::string&& value) {
  set_has_month_label_font_family();
  month_label_font_family_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.CalendarConfig.month_label_font_family)
}
#endif
inline void CalendarConfig::set_month_label_font_family(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_month_label_font_family();
  month_label_font_family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.CalendarConfig.month_label_font_family)
}
inline void CalendarConfig::set_month_label_font_family(const char* value, size_t size) {
  set_has_month_label_font_family();
  month_label_font_family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.CalendarConfig.month_label_font_family)
}
inline ::std::string* CalendarConfig::mutable_month_label_font_family() {
  set_has_month_label_font_family();
  // @@protoc_insertion_point(field_mutable:config.CalendarConfig.month_label_font_family)
  return month_label_font_family_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CalendarConfig::release_month_label_font_family() {
  // @@protoc_insertion_point(field_release:config.CalendarConfig.month_label_font_family)
  if (!has_month_label_font_family()) {
    return NULL;
  }
  clear_has_month_label_font_family();
  return month_label_font_family_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CalendarConfig::set_allocated_month_label_font_family(::std::string* month_label_font_family) {
  if (month_label_font_family != NULL) {
    set_has_month_label_font_family();
  } else {
    clear_has_month_label_font_family();
  }
  month_label_font_family_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), month_label_font_family);
  // @@protoc_insertion_point(field_set_allocated:config.CalendarConfig.month_label_font_family)
}

// optional double month_label_font_size = 18;
inline bool CalendarConfig::has_month_label_font_size() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CalendarConfig::set_has_month_label_font_size() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CalendarConfig::clear_has_month_label_font_size() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CalendarConfig::clear_month_label_font_size() {
  month_label_font_size_ = 0;
  clear_has_month_label_font_size();
}
inline double CalendarConfig::month_label_font_size() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.month_label_font_size)
  return month_label_font_size_;
}
inline void CalendarConfig::set_month_label_font_size(double value) {
  set_has_month_label_font_size();
  month_label_font_size_ = value;
  // @@protoc_insertion_point(field_set:config.CalendarConfig.month_label_font_size)
}

// optional bool month_label_uppercase = 19 [default = false];
inline bool CalendarConfig::has_month_label_uppercase() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CalendarConfig::set_has_month_label_uppercase() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CalendarConfig::clear_has_month_label_uppercase() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CalendarConfig::clear_month_label_uppercase() {
  month_label_uppercase_ = false;
  clear_has_month_label_uppercase();
}
inline bool CalendarConfig::month_label_uppercase() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.month_label_uppercase)
  return month_label_uppercase_;
}
inline void CalendarConfig::set_month_label_uppercase(bool value) {
  set_has_month_label_uppercase();
  month_label_uppercase_ = value;
  // @@protoc_insertion_point(field_set:config.CalendarConfig.month_label_uppercase)
}

// optional string wday_label_font_family = 20;
inline bool CalendarConfig::has_wday_label_font_family() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CalendarConfig::set_has_wday_label_font_family() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CalendarConfig::clear_has_wday_label_font_family() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CalendarConfig::clear_wday_label_font_family() {
  wday_label_font_family_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_wday_label_font_family();
}
inline const ::std::string& CalendarConfig::wday_label_font_family() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.wday_label_font_family)
  return wday_label_font_family_.GetNoArena();
}
inline void CalendarConfig::set_wday_label_font_family(const ::std::string& value) {
  set_has_wday_label_font_family();
  wday_label_font_family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.CalendarConfig.wday_label_font_family)
}
#if LANG_CXX11
inline void CalendarConfig::set_wday_label_font_family(::std::string&& value) {
  set_has_wday_label_font_family();
  wday_label_font_family_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.CalendarConfig.wday_label_font_family)
}
#endif
inline void CalendarConfig::set_wday_label_font_family(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_wday_label_font_family();
  wday_label_font_family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.CalendarConfig.wday_label_font_family)
}
inline void CalendarConfig::set_wday_label_font_family(const char* value, size_t size) {
  set_has_wday_label_font_family();
  wday_label_font_family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.CalendarConfig.wday_label_font_family)
}
inline ::std::string* CalendarConfig::mutable_wday_label_font_family() {
  set_has_wday_label_font_family();
  // @@protoc_insertion_point(field_mutable:config.CalendarConfig.wday_label_font_family)
  return wday_label_font_family_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CalendarConfig::release_wday_label_font_family() {
  // @@protoc_insertion_point(field_release:config.CalendarConfig.wday_label_font_family)
  if (!has_wday_label_font_family()) {
    return NULL;
  }
  clear_has_wday_label_font_family();
  return wday_label_font_family_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CalendarConfig::set_allocated_wday_label_font_family(::std::string* wday_label_font_family) {
  if (wday_label_font_family != NULL) {
    set_has_wday_label_font_family();
  } else {
    clear_has_wday_label_font_family();
  }
  wday_label_font_family_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wday_label_font_family);
  // @@protoc_insertion_point(field_set_allocated:config.CalendarConfig.wday_label_font_family)
}

// optional double wday_label_font_size = 21;
inline bool CalendarConfig::has_wday_label_font_size() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CalendarConfig::set_has_wday_label_font_size() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CalendarConfig::clear_has_wday_label_font_size() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CalendarConfig::clear_wday_label_font_size() {
  wday_label_font_size_ = 0;
  clear_has_wday_label_font_size();
}
inline double CalendarConfig::wday_label_font_size() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.wday_label_font_size)
  return wday_label_font_size_;
}
inline void CalendarConfig::set_wday_label_font_size(double value) {
  set_has_wday_label_font_size();
  wday_label_font_size_ = value;
  // @@protoc_insertion_point(field_set:config.CalendarConfig.wday_label_font_size)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace config

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::config::OutputType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::config::OutputType>() {
  return ::config::OutputType_descriptor();
}
template <> struct is_proto_enum< ::config::PaperType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::config::PaperType>() {
  return ::config::PaperType_descriptor();
}
template <> struct is_proto_enum< ::config::Language> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::config::Language>() {
  return ::config::Language_descriptor();
}
template <> struct is_proto_enum< ::config::PlanType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::config::PlanType>() {
  return ::config::PlanType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_config_2eproto
